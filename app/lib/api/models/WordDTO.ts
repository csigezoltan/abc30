/* tslint:disable */
/* eslint-disable */
/**
 * ABC30
 * ABC30
 *
 * The version of the OpenAPI document: 1.0
 * Contact: zsolt.nagy@ingenimind.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExampleDTO } from './ExampleDTO';
import {
    ExampleDTOFromJSON,
    ExampleDTOFromJSONTyped,
    ExampleDTOToJSON,
} from './ExampleDTO';
import type { GrammaticalExpressionDTO } from './GrammaticalExpressionDTO';
import {
    GrammaticalExpressionDTOFromJSON,
    GrammaticalExpressionDTOFromJSONTyped,
    GrammaticalExpressionDTOToJSON,
} from './GrammaticalExpressionDTO';
import type { TranslationDTO } from './TranslationDTO';
import {
    TranslationDTOFromJSON,
    TranslationDTOFromJSONTyped,
    TranslationDTOToJSON,
} from './TranslationDTO';
import type { WordFormDTO } from './WordFormDTO';
import {
    WordFormDTOFromJSON,
    WordFormDTOFromJSONTyped,
    WordFormDTOToJSON,
} from './WordFormDTO';

/**
 * 
 * @export
 * @interface WordDTO
 */
export interface WordDTO {
    /**
     * The cursive image
     * @type {string}
     * @memberof WordDTO
     */
    cursiveImage?: string;
    /**
     * The description
     * @type {string}
     * @memberof WordDTO
     */
    description?: string;
    /**
     * The word forms
     * @type {Array<WordFormDTO>}
     * @memberof WordDTO
     */
    forms?: Array<WordFormDTO>;
    /**
     * The syllabified word
     * @type {string}
     * @memberof WordDTO
     */
    hyphenation?: string;
    /**
     * The ID
     * @type {string}
     * @memberof WordDTO
     */
    id?: string;
    /**
     * The idioms
     * @type {Array<GrammaticalExpressionDTO>}
     * @memberof WordDTO
     */
    idioms?: Array<GrammaticalExpressionDTO>;
    /**
     * The image path
     * @type {string}
     * @memberof WordDTO
     */
    imagePath?: string;
    /**
     * The language
     * @type {string}
     * @memberof WordDTO
     */
    language?: string;
    /**
     * The lemma value
     * @type {string}
     * @memberof WordDTO
     */
    lemma?: string;
    /**
     * The proverbs
     * @type {Array<GrammaticalExpressionDTO>}
     * @memberof WordDTO
     */
    proverbs?: Array<GrammaticalExpressionDTO>;
    /**
     * The word order
     * @type {number}
     * @memberof WordDTO
     */
    sequence?: number;
    /**
     * The examples in source language
     * @type {Array<ExampleDTO>}
     * @memberof WordDTO
     */
    sourceLanguageExamples?: Array<ExampleDTO>;
    /**
     * The examples in target language
     * @type {Array<ExampleDTO>}
     * @memberof WordDTO
     */
    targetLanguageExamples?: Array<ExampleDTO>;
    /**
     * The translations
     * @type {Array<TranslationDTO>}
     * @memberof WordDTO
     */
    translations?: Array<TranslationDTO>;
    /**
     * The word class
     * @type {string}
     * @memberof WordDTO
     */
    wordClass?: string;
}

/**
 * Check if a given object implements the WordDTO interface.
 */
export function instanceOfWordDTO(value: object): boolean {
    return true;
}

export function WordDTOFromJSON(json: any): WordDTO {
    return WordDTOFromJSONTyped(json, false);
}

export function WordDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): WordDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'cursiveImage': json['cursiveImage'] == null ? undefined : json['cursiveImage'],
        'description': json['description'] == null ? undefined : json['description'],
        'forms': json['forms'] == null ? undefined : ((json['forms'] as Array<any>).map(WordFormDTOFromJSON)),
        'hyphenation': json['hyphenation'] == null ? undefined : json['hyphenation'],
        'id': json['id'] == null ? undefined : json['id'],
        'idioms': json['idioms'] == null ? undefined : ((json['idioms'] as Array<any>).map(GrammaticalExpressionDTOFromJSON)),
        'imagePath': json['imagePath'] == null ? undefined : json['imagePath'],
        'language': json['language'] == null ? undefined : json['language'],
        'lemma': json['lemma'] == null ? undefined : json['lemma'],
        'proverbs': json['proverbs'] == null ? undefined : ((json['proverbs'] as Array<any>).map(GrammaticalExpressionDTOFromJSON)),
        'sequence': json['sequence'] == null ? undefined : json['sequence'],
        'sourceLanguageExamples': json['sourceLanguageExamples'] == null ? undefined : ((json['sourceLanguageExamples'] as Array<any>).map(ExampleDTOFromJSON)),
        'targetLanguageExamples': json['targetLanguageExamples'] == null ? undefined : ((json['targetLanguageExamples'] as Array<any>).map(ExampleDTOFromJSON)),
        'translations': json['translations'] == null ? undefined : ((json['translations'] as Array<any>).map(TranslationDTOFromJSON)),
        'wordClass': json['wordClass'] == null ? undefined : json['wordClass'],
    };
}

export function WordDTOToJSON(value?: WordDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'cursiveImage': value['cursiveImage'],
        'description': value['description'],
        'forms': value['forms'] == null ? undefined : ((value['forms'] as Array<any>).map(WordFormDTOToJSON)),
        'hyphenation': value['hyphenation'],
        'id': value['id'],
        'idioms': value['idioms'] == null ? undefined : ((value['idioms'] as Array<any>).map(GrammaticalExpressionDTOToJSON)),
        'imagePath': value['imagePath'],
        'language': value['language'],
        'lemma': value['lemma'],
        'proverbs': value['proverbs'] == null ? undefined : ((value['proverbs'] as Array<any>).map(GrammaticalExpressionDTOToJSON)),
        'sequence': value['sequence'],
        'sourceLanguageExamples': value['sourceLanguageExamples'] == null ? undefined : ((value['sourceLanguageExamples'] as Array<any>).map(ExampleDTOToJSON)),
        'targetLanguageExamples': value['targetLanguageExamples'] == null ? undefined : ((value['targetLanguageExamples'] as Array<any>).map(ExampleDTOToJSON)),
        'translations': value['translations'] == null ? undefined : ((value['translations'] as Array<any>).map(TranslationDTOToJSON)),
        'wordClass': value['wordClass'],
    };
}

